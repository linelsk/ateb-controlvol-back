// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using biz.ateb.Entities;
namespace dal.ateb.DBContext;

public partial class controlvolContext : DbContext
{
    public controlvolContext(DbContextOptions<controlvolContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Accione> Acciones { get; set; }

    public virtual DbSet<Bitacora> Bitacoras { get; set; }

    public virtual DbSet<CCaracter> CCaracters { get; set; }

    public virtual DbSet<CClaveInstalacion> CClaveInstalacions { get; set; }

    public virtual DbSet<CClaveProducto> CClaveProductos { get; set; }

    public virtual DbSet<CClaveSubproducto> CClaveSubproductos { get; set; }

    public virtual DbSet<CEstadoTanque> CEstadoTanques { get; set; }

    public virtual DbSet<CModalidadPermiso> CModalidadPermisos { get; set; }

    public virtual DbSet<CTipo> CTipos { get; set; }

    public virtual DbSet<CTipoDeRegistro> CTipoDeRegistros { get; set; }

    public virtual DbSet<CTipoEvento> CTipoEventos { get; set; }

    public virtual DbSet<CTipoImpExp> CTipoImpExps { get; set; }

    public virtual DbSet<CaracterPermiso> CaracterPermisos { get; set; }

    public virtual DbSet<CaracterPermisosAdjunto> CaracterPermisosAdjuntos { get; set; }

    public virtual DbSet<CertificadosProveedore> CertificadosProveedores { get; set; }

    public virtual DbSet<CompAlmCertificado> CompAlmCertificados { get; set; }

    public virtual DbSet<CompAlmCfdinacional> CompAlmCfdinacionals { get; set; }

    public virtual DbSet<CompAlmCfdinacionalDocumento> CompAlmCfdinacionalDocumentos { get; set; }

    public virtual DbSet<CompAlmDictaman> CompAlmDictamen { get; set; }

    public virtual DbSet<CompAlmProveedorNacionalDiario> CompAlmProveedorNacionalDiarios { get; set; }

    public virtual DbSet<CompAlmProveedorNacionalMensual> CompAlmProveedorNacionalMensuals { get; set; }

    public virtual DbSet<CompAlmTransporteDiario> CompAlmTransporteDiarios { get; set; }

    public virtual DbSet<CompAlmTransporteMensual> CompAlmTransporteMensuals { get; set; }

    public virtual DbSet<Complemento> Complementos { get; set; }

    public virtual DbSet<ControlExistenciasAcumOpsEntregaDiario> ControlExistenciasAcumOpsEntregaDiarios { get; set; }

    public virtual DbSet<ControlExistenciasAcumOpsRecepcionDiario> ControlExistenciasAcumOpsRecepcionDiarios { get; set; }

    public virtual DbSet<ControlExistenciasAnteriorDiario> ControlExistenciasAnteriorDiarios { get; set; }

    public virtual DbSet<ControlExistenciasDiario> ControlExistenciasDiarios { get; set; }

    public virtual DbSet<ControlExistenciasMensual> ControlExistenciasMensuals { get; set; }

    public virtual DbSet<DictamenDiario> DictamenDiarios { get; set; }

    public virtual DbSet<Dictamene> Dictamenes { get; set; }

    public virtual DbSet<Diesel> Diesels { get; set; }

    public virtual DbSet<Dispensario> Dispensarios { get; set; }

    public virtual DbSet<DispensariosManguera> DispensariosMangueras { get; set; }

    public virtual DbSet<Documento> Documentos { get; set; }

    public virtual DbSet<DocumentoAutomaticoMensual> DocumentoAutomaticoMensuals { get; set; }

    public virtual DbSet<DocumentoBitacora> DocumentoBitacoras { get; set; }

    public virtual DbSet<DocumentoDiarioDispenEntrega> DocumentoDiarioDispenEntregas { get; set; }

    public virtual DbSet<DocumentoDiarioDispenEntrega1> DocumentoDiarioDispenEntregas1 { get; set; }

    public virtual DbSet<DocumentoDiarioManguera> DocumentoDiarioMangueras { get; set; }

    public virtual DbSet<DocumentoDiarioMedicionDispensario> DocumentoDiarioMedicionDispensarios { get; set; }

    public virtual DbSet<DocumentoDiarioMedicionDucto> DocumentoDiarioMedicionDuctos { get; set; }

    public virtual DbSet<DocumentoDiesel> DocumentoDiesels { get; set; }

    public virtual DbSet<DocumentoDispensario> DocumentoDispensarios { get; set; }

    public virtual DbSet<DocumentoDucto> DocumentoDuctos { get; set; }

    public virtual DbSet<DocumentoEstatus> DocumentoEstatuses { get; set; }

    public virtual DbSet<DocumentoExistencium> DocumentoExistencia { get; set; }

    public virtual DbSet<DocumentoGasLp> DocumentoGasLps { get; set; }

    public virtual DbSet<DocumentoGasNatural> DocumentoGasNaturals { get; set; }

    public virtual DbSet<DocumentoGasolina> DocumentoGasolinas { get; set; }

    public virtual DbSet<DocumentoGenerado> DocumentoGenerados { get; set; }

    public virtual DbSet<DocumentoGeolocalizacion> DocumentoGeolocalizacions { get; set; }

    public virtual DbSet<DocumentoMedicionTanque> DocumentoMedicionTanques { get; set; }

    public virtual DbSet<DocumentoProducto> DocumentoProductos { get; set; }

    public virtual DbSet<DocumentoProveedore> DocumentoProveedores { get; set; }

    public virtual DbSet<DocumentoTanque> DocumentoTanques { get; set; }

    public virtual DbSet<DocumentoTanqueExistencium> DocumentoTanqueExistencia { get; set; }

    public virtual DbSet<Ducto> Ductos { get; set; }

    public virtual DbSet<Empresa> Empresas { get; set; }

    public virtual DbSet<EmpresaCfgNotificacione> EmpresaCfgNotificaciones { get; set; }

    public virtual DbSet<EmpresaImpExp> EmpresaImpExps { get; set; }

    public virtual DbSet<EmpresaPlantum> EmpresaPlanta { get; set; }

    public virtual DbSet<EmpresaProducto> EmpresaProductos { get; set; }

    public virtual DbSet<EmpresaProveedor> EmpresaProveedors { get; set; }

    public virtual DbSet<EntregaDiario> EntregaDiarios { get; set; }

    public virtual DbSet<EntregasDiario> EntregasDiarios { get; set; }

    public virtual DbSet<EntregasMensuale> EntregasMensuales { get; set; }

    public virtual DbSet<GasLp> GasLps { get; set; }

    public virtual DbSet<GasNatural> GasNaturals { get; set; }

    public virtual DbSet<Gasolina> Gasolinas { get; set; }

    public virtual DbSet<HistoryPass> HistoryPasses { get; set; }

    public virtual DbSet<LogMovimiento> LogMovimientos { get; set; }

    public virtual DbSet<Manuale> Manuales { get; set; }

    public virtual DbSet<MedicionDispensario> MedicionDispensarios { get; set; }

    public virtual DbSet<MedicionDucto> MedicionDuctos { get; set; }

    public virtual DbSet<MedicionTanque> MedicionTanques { get; set; }

    public virtual DbSet<Mitablanueva> Mitablanuevas { get; set; }

    public virtual DbSet<PerfilAccion> PerfilAccions { get; set; }

    public virtual DbSet<PerfilEmpresa> PerfilEmpresas { get; set; }

    public virtual DbSet<Perfile> Perfiles { get; set; }

    public virtual DbSet<PeticionPassword> PeticionPasswords { get; set; }

    public virtual DbSet<PlantaGeolocalizacion> PlantaGeolocalizacions { get; set; }

    public virtual DbSet<PlantaProducto> PlantaProductos { get; set; }

    public virtual DbSet<Plantum> Planta { get; set; }

    public virtual DbSet<Producto> Productos { get; set; }

    public virtual DbSet<Proveedore> Proveedores { get; set; }

    public virtual DbSet<RecepcionDiario> RecepcionDiarios { get; set; }

    public virtual DbSet<RecepcionesDiario> RecepcionesDiarios { get; set; }

    public virtual DbSet<RecepcionesMensuale> RecepcionesMensuales { get; set; }

    public virtual DbSet<TClavePermiso> TClavePermisos { get; set; }

    public virtual DbSet<TClaveUnidadMedidum> TClaveUnidadMedida { get; set; }

    public virtual DbSet<Tanque> Tanques { get; set; }

    public virtual DbSet<TipoDocumento> TipoDocumentos { get; set; }

    public virtual DbSet<TipoImportacioDiario> TipoImportacioDiarios { get; set; }

    public virtual DbSet<TipoImportacionMensual> TipoImportacionMensuals { get; set; }

    public virtual DbSet<TipoNotificacion> TipoNotificacions { get; set; }

    public virtual DbSet<TipoProveedor> TipoProveedors { get; set; }

    public virtual DbSet<Usuario> Usuarios { get; set; }

    public virtual DbSet<UsuarioPlantum> UsuarioPlanta { get; set; }

    public virtual DbSet<VersionControlVolumetrico> VersionControlVolumetricos { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Accione>(entity =>
        {
            entity.HasKey(e => e.CodAccion);

            entity.Property(e => e.CodAccion)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("codAccion");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.Seccion)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("seccion");
        });

        modelBuilder.Entity<Bitacora>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NumeroRegistro });

            entity.ToTable("Bitacora");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NumeroRegistro).HasColumnName("numeroRegistro");
            entity.Property(e => e.DescripcionEvento)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("descripcionEvento");
            entity.Property(e => e.FechaYhoraEvento)
                .HasColumnType("datetime")
                .HasColumnName("fechaYHoraEvento");
            entity.Property(e => e.IdentificacionEvento)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("identificacionEvento");
            entity.Property(e => e.TipoEvento)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("tipoEvento");
            entity.Property(e => e.UsuarioResponsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioResponsable");

            entity.HasOne(d => d.Empresa).WithMany(p => p.Bitacoras)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Bitacora_Empresa");

            entity.HasOne(d => d.Planta).WithMany(p => p.Bitacoras)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Bitacora_Planta");

            entity.HasOne(d => d.TipoEventoNavigation).WithMany(p => p.Bitacoras)
                .HasForeignKey(d => d.TipoEvento)
                .HasConstraintName("FK_Bitacora_c_TipoEvento");
        });

        modelBuilder.Entity<CCaracter>(entity =>
        {
            entity.ToTable("c_Caracter");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.TipoCaracter)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tipoCaracter");
        });

        modelBuilder.Entity<CClaveInstalacion>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.ClaveInstalacion })
                .HasName("PK__c_ClaveI__3213E83F14B95767")
                .HasAnnotation("SqlServer:FillFactor", 100);

            entity.ToTable("c_ClaveInstalacion");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("id");
            entity.Property(e => e.ClaveInstalacion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("claveInstalacion");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<CClaveProducto>(entity =>
        {
            entity.ToTable("c_ClaveProductos");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.ClaveProducto)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("claveProducto");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<CClaveSubproducto>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_c_claveSubproductos");

            entity.ToTable("c_ClaveSubproductos");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ClaveSubProducto)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("claveSubProducto");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<CEstadoTanque>(entity =>
        {
            entity.HasKey(e => e.EstadoTanque);

            entity.ToTable("c_EstadoTanque");

            entity.Property(e => e.EstadoTanque)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("estadoTanque");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<CModalidadPermiso>(entity =>
        {
            entity.ToTable("c_ModalidadPermiso");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.ModalidadPermiso)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("modalidadPermiso");
        });

        modelBuilder.Entity<CTipo>(entity =>
        {
            entity.HasKey(e => e.Tipo);

            entity.ToTable("c_Tipo");

            entity.Property(e => e.Tipo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("tipo");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<CTipoDeRegistro>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.TipoRegistro })
                .HasName("PK__c_TipoDe__04F2582EAB3898CB")
                .HasAnnotation("SqlServer:FillFactor", 100);

            entity.ToTable("c_TipoDeRegistro");

            entity.Property(e => e.Id)
                .ValueGeneratedOnAdd()
                .HasColumnName("id");
            entity.Property(e => e.TipoRegistro)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("tipoRegistro");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<CTipoEvento>(entity =>
        {
            entity.HasKey(e => e.TipoEvento);

            entity.ToTable("c_TipoEvento");

            entity.Property(e => e.TipoEvento)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("tipoEvento");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.Id).HasColumnName("id");
        });

        modelBuilder.Entity<CTipoImpExp>(entity =>
        {
            entity.HasKey(e => e.TipoDocumento);

            entity.ToTable("c_TipoImpExp");

            entity.Property(e => e.TipoDocumento)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("tipoDocumento");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.TipoImportacion)
                .IsRequired()
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("tipoImportacion");

            entity.HasOne(d => d.TipoDocumentoNavigation).WithOne(p => p.CTipoImpExp)
                .HasForeignKey<CTipoImpExp>(d => d.TipoDocumento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_c_TipoImpExp_c_TipoImpExp");
        });

        modelBuilder.Entity<CaracterPermiso>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NumPermiso })
                .HasName("PK__Caracter__D56C6E762BF1C6CE")
                .HasAnnotation("SqlServer:FillFactor", 100);

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NumPermiso)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("numPermiso");
        });

        modelBuilder.Entity<CaracterPermisosAdjunto>(entity =>
        {
            entity.HasKey(e => new { e.Id, e.NumPermiso })
                .HasName("PK__Caracter__C84BC82159D4CFF4")
                .HasAnnotation("SqlServer:FillFactor", 100);

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.NumPermiso)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("numPermiso");
            entity.Property(e => e.AdjuntoPdf)
                .HasMaxLength(8000)
                .HasColumnName("adjuntoPDF");
            entity.Property(e => e.AdjuntoXml)
                .HasMaxLength(8000)
                .HasColumnName("adjuntoXML");
        });

        modelBuilder.Entity<CertificadosProveedore>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.NumeroFolioCertificado });

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.NumeroFolioCertificado)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("numeroFolioCertificado");
            entity.Property(e => e.Activo).HasColumnName("activo");
            entity.Property(e => e.AdjuntoPdfcertificado).HasColumnName("adjuntoPDFCertificado");
            entity.Property(e => e.AdjuntoXmlcertificado).HasColumnName("adjuntoXMLCertificado");
            entity.Property(e => e.FechaEmisionCertificado).HasColumnName("fechaEmisionCertificado");
            entity.Property(e => e.ResultadoCertificado)
                .IsRequired()
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("resultadoCertificado");
            entity.Property(e => e.RfcCertificado)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("rfcCertificado");

            entity.HasOne(d => d.Empresa).WithMany(p => p.CertificadosProveedores)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_CertificadosProveedores_Empresa");
        });

        modelBuilder.Entity<CompAlmCertificado>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento });

            entity.ToTable("compAlm_Certificado");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.FechaEmisionCertificado).HasColumnName("fechaEmisionCertificado");
            entity.Property(e => e.NumeroFolioCertificado)
                .IsRequired()
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("numeroFolioCertificado");
            entity.Property(e => e.ResultadoCertificado)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("resultadoCertificado");
            entity.Property(e => e.RfcCertificado)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("rfcCertificado");

            entity.HasOne(d => d.Empresa).WithMany(p => p.CompAlmCertificados)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_compAlm_Certificado_Empresa");

            entity.HasOne(d => d.Planta).WithMany(p => p.CompAlmCertificados)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_compAlm_Certificado_Planta");
        });

        modelBuilder.Entity<CompAlmCfdinacional>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento, e.Consecutivo })
                .HasName("PK__compAlm___C13D380EEA347CAC")
                .HasAnnotation("SqlServer:FillFactor", 100);

            entity.ToTable("compAlm_CFDINacional");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.Consecutivo).HasColumnName("consecutivo");
            entity.Property(e => e.Aclaracion)
                .HasMaxLength(600)
                .IsUnicode(false)
                .HasColumnName("aclaracion");
            entity.Property(e => e.CargoPorCapacidadAlmac)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("cargoPorCapacidadAlmac");
            entity.Property(e => e.CargoPorUsoAlmac)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("cargoPorUsoAlmac");
            entity.Property(e => e.CargoVolumetricoAlmac)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("cargoVolumetricoAlmac");
            entity.Property(e => e.ClaveTanque)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("claveTanque");
            entity.Property(e => e.ConsecutivoRecepcion).HasColumnName("consecutivoRecepcion");
            entity.Property(e => e.Contraprestacion)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("contraprestacion");
            entity.Property(e => e.Descuento)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("descuento");
            entity.Property(e => e.FechaYhoraTransaccion)
                .HasColumnType("datetime")
                .HasColumnName("fechaYHoraTransaccion");
            entity.Property(e => e.NombreClienteOproveedor)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nombreClienteOProveedor");
            entity.Property(e => e.PermisoProveedor)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("permisoProveedor");
            entity.Property(e => e.PoderCalorifico)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("poderCalorifico");
            entity.Property(e => e.PrecioCompra)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("precioCompra");
            entity.Property(e => e.PrecioUnitario)
                .HasColumnType("decimal(18, 3)")
                .HasColumnName("precioUnitario");
            entity.Property(e => e.ProveedorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("proveedorId");
            entity.Property(e => e.RfcClienteOproveedor)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("rfcClienteOProveedor");
            entity.Property(e => e.TarifaDeAlmacenamiento)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("tarifaDeAlmacenamiento");
            entity.Property(e => e.TipoCfdi)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tipoCFDI");
            entity.Property(e => e.TipoDocumento)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("tipoDocumento");
            entity.Property(e => e.TipoEs)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("tipoES");
            entity.Property(e => e.Um).HasColumnName("UM");
            entity.Property(e => e.Uuid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("uuid");
            entity.Property(e => e.ValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("valorNumerico");

            entity.HasOne(d => d.Empresa).WithMany(p => p.CompAlmCfdinacionals)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_compAlm_CFDINacional_Empresa");

            entity.HasOne(d => d.Planta).WithMany(p => p.CompAlmCfdinacionals)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_compAlm_CFDINacional_Planta");

            entity.HasOne(d => d.UmNavigation).WithMany(p => p.CompAlmCfdinacionals)
                .HasForeignKey(d => d.Um)
                .HasConstraintName("FK_compAlm_CFDINacional_t_claveUnidadMedida");
        });

        modelBuilder.Entity<CompAlmCfdinacionalDocumento>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento, e.Consecutivo });

            entity.ToTable("compAlm_CFDINacionalDocumentos");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.Consecutivo).HasColumnName("consecutivo");
            entity.Property(e => e.ClaveTanque)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("claveTanque");
            entity.Property(e => e.Pdf).HasColumnName("pdf");
            entity.Property(e => e.Xml).HasColumnName("xml");

            entity.HasOne(d => d.Empresa).WithMany(p => p.CompAlmCfdinacionalDocumentos)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_compAlm_CFDINacionalDocumentos_Empresa");

            entity.HasOne(d => d.Planta).WithMany(p => p.CompAlmCfdinacionalDocumentos)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_compAlm_CFDINacionalDocumentos_Planta");
        });

        modelBuilder.Entity<CompAlmDictaman>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento });

            entity.ToTable("compAlm_Dictamen");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.FechaEmisionDictamen).HasColumnName("fechaEmisionDictamen");
            entity.Property(e => e.LoteDictamen)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("loteDictamen");
            entity.Property(e => e.NumeroFolioDictamen)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("numeroFolioDictamen");
            entity.Property(e => e.ResultadoDictamen)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("resultadoDictamen");
            entity.Property(e => e.RfcDictamen)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("rfcDictamen");

            entity.HasOne(d => d.Empresa).WithMany(p => p.CompAlmDictamen)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_compAlm_Dictamen_Empresa");

            entity.HasOne(d => d.Planta).WithMany(p => p.CompAlmDictamen)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_compAlm_Dictamen_Planta");
        });

        modelBuilder.Entity<CompAlmProveedorNacionalDiario>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("compAlm_ProveedorNacionalDiario");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.NombreClienteOproveedor)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nombreClienteOProveedor");
            entity.Property(e => e.PermisoProveedor)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("permisoProveedor");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.RfcClienteOproveedor)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("rfcClienteOProveedor");
        });

        modelBuilder.Entity<CompAlmProveedorNacionalMensual>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento });

            entity.ToTable("compAlm_ProveedorNacionalMensual");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.NombreClienteOproveedor)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("nombreClienteOProveedor");
            entity.Property(e => e.PermisoProveedor)
                .IsRequired()
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("permisoProveedor");
            entity.Property(e => e.ProveedorId)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("proveedorId");
            entity.Property(e => e.RfcClienteOproveedor)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("rfcClienteOProveedor");

            entity.HasOne(d => d.Empresa).WithMany(p => p.CompAlmProveedorNacionalMensuals)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_compAlm_ProveedorNacionalMensual_Empresa");

            entity.HasOne(d => d.Planta).WithMany(p => p.CompAlmProveedorNacionalMensuals)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_compAlm_ProveedorNacionalMensual_Planta");

            entity.HasOne(d => d.Documento).WithOne(p => p.CompAlmProveedorNacionalMensual)
                .HasForeignKey<CompAlmProveedorNacionalMensual>(d => new { d.EmpresaId, d.PlantaId, d.NoDocumento })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_compAlm_ProveedorNacionalMensual_Documento");
        });

        modelBuilder.Entity<CompAlmTransporteDiario>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("compAlm_TransporteDiario");

            entity.Property(e => e.CargoPorCapacidadTrans)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("cargoPorCapacidadTrans");
            entity.Property(e => e.CargoPorUsoTrans)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("cargoPorUsoTrans");
            entity.Property(e => e.CargoVolumetricoTrans)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("cargoVolumetricoTrans");
            entity.Property(e => e.ClaveVehiculo)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("claveVehiculo");
            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.Periodo).HasColumnName("periodo");
            entity.Property(e => e.PermisoTransporte)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("permisoTransporte");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.TarifaDeTransporte)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("tarifaDeTransporte");
        });

        modelBuilder.Entity<CompAlmTransporteMensual>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("compAlm_TransporteMensual");

            entity.Property(e => e.CargoPorCapacidadTrans)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("cargoPorCapacidadTrans");
            entity.Property(e => e.CargoPorUsoTrans)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("cargoPorUsoTrans");
            entity.Property(e => e.CargoVolumetricoTrans)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("cargoVolumetricoTrans");
            entity.Property(e => e.ClaveVehiculo)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("claveVehiculo");
            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.Periodo).HasColumnName("periodo");
            entity.Property(e => e.PermisoTransporte)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("permisoTransporte");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.TarifaDeTransporte)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("tarifaDeTransporte");
        });

        modelBuilder.Entity<Complemento>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento, e.Consecutivo });

            entity.ToTable("Complemento");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.Consecutivo)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("consecutivo");
        });

        modelBuilder.Entity<ControlExistenciasAcumOpsEntregaDiario>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ControlExistenciasAcumOpsEntregaDiario");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.FechaActual)
                .HasColumnType("datetime")
                .HasColumnName("fechaActual");
            entity.Property(e => e.FechaDiaAnterior)
                .HasColumnType("datetime")
                .HasColumnName("fechaDiaAnterior");
            entity.Property(e => e.HoraEntregaAcumulado).HasColumnName("horaEntregaAcumulado");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.Producto)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("producto");
            entity.Property(e => e.Um)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("UM");
            entity.Property(e => e.ValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("valorNumerico");
        });

        modelBuilder.Entity<ControlExistenciasAcumOpsRecepcionDiario>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ControlExistenciasAcumOpsRecepcionDiario");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.FechaActual)
                .HasColumnType("datetime")
                .HasColumnName("fechaActual");
            entity.Property(e => e.FechaDiaAnterior)
                .HasColumnType("datetime")
                .HasColumnName("fechaDiaAnterior");
            entity.Property(e => e.HoraRecepcionAcumulado).HasColumnName("horaRecepcionAcumulado");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.Producto)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("producto");
            entity.Property(e => e.Um)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("UM");
            entity.Property(e => e.ValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("valorNumerico");
        });

        modelBuilder.Entity<ControlExistenciasAnteriorDiario>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ControlExistenciasAnteriorDiario");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.FechaActual)
                .HasColumnType("datetime")
                .HasColumnName("fechaActual");
            entity.Property(e => e.FechaDiaAnterior)
                .HasColumnType("datetime")
                .HasColumnName("fechaDiaAnterior");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.Producto)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("producto");
            entity.Property(e => e.ValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("valorNumerico");
        });

        modelBuilder.Entity<ControlExistenciasDiario>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ControlExistenciasDiario");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.FechaActual)
                .HasColumnType("datetime")
                .HasColumnName("fechaActual");
            entity.Property(e => e.FechaYhoraEstaMedicion)
                .HasColumnType("datetime")
                .HasColumnName("fechaYHoraEstaMedicion");
            entity.Property(e => e.FechaYhoraEstaMedicionAnterior)
                .HasColumnType("datetime")
                .HasColumnName("fechaYHoraEstaMedicionAnterior");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.Producto)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("producto");
            entity.Property(e => e.ValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("valorNumerico");
        });

        modelBuilder.Entity<ControlExistenciasMensual>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("ControlExistenciasMensual");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.FechaActual)
                .HasColumnType("datetime")
                .HasColumnName("fechaActual");
            entity.Property(e => e.FechaYhoraEstaMedicionMes)
                .HasColumnType("datetime")
                .HasColumnName("FechaYHoraEstaMedicionMes");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.Producto)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("producto");
            entity.Property(e => e.ValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("valorNumerico");
        });

        modelBuilder.Entity<DictamenDiario>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NumeroFolioDictamen })
                .HasName("PK__Dictamen__54310A6C987AC725")
                .HasAnnotation("SqlServer:FillFactor", 100);

            entity.ToTable("DictamenDiario");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NumeroFolioDictamen)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("numeroFolioDictamen");
            entity.Property(e => e.FechaEmisionDictamen).HasColumnName("fechaEmisionDictamen");
            entity.Property(e => e.LoteDictamen)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("loteDictamen");
            entity.Property(e => e.ResultadoDictamen)
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("resultadoDictamen");
            entity.Property(e => e.RfcDictamen)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("rfcDictamen");
        });

        modelBuilder.Entity<Dictamene>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NumeroFolioDictamen });

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NumeroFolioDictamen)
                .HasMaxLength(21)
                .IsUnicode(false)
                .HasColumnName("numeroFolioDictamen");
            entity.Property(e => e.Activo).HasColumnName("activo");
            entity.Property(e => e.AdjuntoPdfdictamen).HasColumnName("adjuntoPDFDictamen");
            entity.Property(e => e.AdjuntoXmldcitamen).HasColumnName("adjuntoXMLDcitamen");
            entity.Property(e => e.FechaEmisionDictamen).HasColumnName("fechaEmisionDictamen");
            entity.Property(e => e.IdClaveProducto).HasColumnName("idClaveProducto");
            entity.Property(e => e.LoteDictamen)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("loteDictamen");
            entity.Property(e => e.ResultadoDictamen)
                .IsRequired()
                .HasMaxLength(300)
                .IsUnicode(false)
                .HasColumnName("resultadoDictamen");
            entity.Property(e => e.RfcDictamen)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("rfcDictamen");
            entity.Property(e => e.RfcPersonal)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("rfcPersonal");
            entity.Property(e => e.RfcRepresentanteLegalProveedor)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("rfcRepresentanteLegalProveedor");

            entity.HasOne(d => d.Empresa).WithMany(p => p.Dictamenes)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Dictamenes_Empresa");

            entity.HasOne(d => d.IdClaveProductoNavigation).WithMany(p => p.Dictamenes)
                .HasForeignKey(d => d.IdClaveProducto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Dictamenes_c_ClaveProductos");

            entity.HasOne(d => d.Planta).WithMany(p => p.Dictamenes)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Dictamenes_Planta");
        });

        modelBuilder.Entity<Diesel>(entity =>
        {
            entity.HasKey(e => e.ProductoId);

            entity.ToTable("Diesel");

            entity.Property(e => e.ProductoId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("productoId");
            entity.Property(e => e.ComposDeCombustibleNoFosilEnDiesel)
                .HasColumnType("numeric(4, 2)")
                .HasColumnName("composDeCombustibleNoFosilEnDiesel");
            entity.Property(e => e.DieselConCombustibleNoFosil)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("dieselConCombustibleNoFosil");
        });

        modelBuilder.Entity<Dispensario>(entity =>
        {
            entity.HasKey(e => new { e.PlantaId, e.ClaveDispensario }).HasName("PK_Dispensarios_1");

            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.ClaveDispensario)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("claveDispensario");

            entity.HasOne(d => d.Planta).WithMany(p => p.Dispensarios)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Dispensarios_Planta");
        });

        modelBuilder.Entity<DispensariosManguera>(entity =>
        {
            entity.HasKey(e => new { e.PlantaId, e.ClaveDispensario, e.Consecutivo });

            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.ClaveDispensario)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("claveDispensario");
            entity.Property(e => e.Consecutivo).HasColumnName("consecutivo");
            entity.Property(e => e.IdentificadorManguera)
                .IsRequired()
                .HasMaxLength(18)
                .IsUnicode(false);

            entity.HasOne(d => d.Planta).WithMany(p => p.DispensariosMangueras)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DispensariosMangueras_Planta");
        });

        modelBuilder.Entity<Documento>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento })
                .HasName("PK__Document__835256962AE9676A")
                .HasAnnotation("SqlServer:FillFactor", 100);

            entity.ToTable("Documento");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.ClaveInstalacion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("claveInstalacion");
            entity.Property(e => e.DescripcionInstalacion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("descripcionInstalacion");
            entity.Property(e => e.Estatus)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("estatus");
            entity.Property(e => e.FechaGeneracion)
                .HasColumnType("datetime")
                .HasColumnName("fechaGeneracion");
            entity.Property(e => e.FechayHoraCorteDiario)
                .HasColumnType("datetime")
                .HasColumnName("fechayHoraCorteDiario");
            entity.Property(e => e.FechayHoraReporteMes)
                .HasColumnType("datetime")
                .HasColumnName("fechayHoraReporteMes");
            entity.Property(e => e.IdentificadorUnico)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("identificadorUnico");
            entity.Property(e => e.InstalacionAlmacenGasNatural)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("instalacionAlmacenGasNatural");
            entity.Property(e => e.ModalidadPermiso).HasColumnName("modalidadPermiso");
            entity.Property(e => e.NombreImportacion)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("nombreImportacion");
            entity.Property(e => e.NumContratoOasignacion)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("numContratoOAsignacion");
            entity.Property(e => e.NumPermiso)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("numPermiso");
            entity.Property(e => e.NumeroDispensarios).HasColumnName("numeroDispensarios");
            entity.Property(e => e.NumeroDuctosEntradaSalida).HasColumnName("numeroDuctosEntradaSalida");
            entity.Property(e => e.NumeroDuctosTransporteDistribucion).HasColumnName("numeroDuctosTransporteDistribucion");
            entity.Property(e => e.NumeroPozos).HasColumnName("numeroPozos");
            entity.Property(e => e.NumeroTanques).HasColumnName("numeroTanques");
            entity.Property(e => e.Periodo).HasColumnName("periodo");
            entity.Property(e => e.PorcentajeCaptura)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("porcentajeCaptura");
            entity.Property(e => e.RfcProveedorInformatico)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("rfcProveedorInformatico");
            entity.Property(e => e.TipoCaracter).HasColumnName("tipoCaracter");
            entity.Property(e => e.TipoDocumento)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("tipoDocumento");
            entity.Property(e => e.VersionCtrVol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("versionCtrVol");

            entity.HasOne(d => d.Empresa).WithMany(p => p.Documentos)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Documento_Empresa");

            entity.HasOne(d => d.EstatusNavigation).WithMany(p => p.Documentos)
                .HasForeignKey(d => d.Estatus)
                .HasConstraintName("FK_Documento_DocumentoEstatus");

            entity.HasOne(d => d.ModalidadPermisoNavigation).WithMany(p => p.Documentos)
                .HasForeignKey(d => d.ModalidadPermiso)
                .HasConstraintName("FK_Documento_t_clavePermisos");

            entity.HasOne(d => d.Planta).WithMany(p => p.Documentos)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Documento_Planta");

            entity.HasOne(d => d.TipoCaracterNavigation).WithMany(p => p.Documentos)
                .HasForeignKey(d => d.TipoCaracter)
                .HasConstraintName("FK_Documento_c_Caracter");

            entity.HasOne(d => d.TipoDocumentoNavigation).WithMany(p => p.Documentos)
                .HasForeignKey(d => d.TipoDocumento)
                .HasConstraintName("FK_Documento_TipoDocumento");

            entity.HasOne(d => d.VersionCtrVolNavigation).WithMany(p => p.Documentos)
                .HasForeignKey(d => d.VersionCtrVol)
                .HasConstraintName("FK_Documento_VersionControlVolumetrico");
        });

        modelBuilder.Entity<DocumentoAutomaticoMensual>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.NoDocumento, e.PlantaId });

            entity.ToTable("DocumentoAutomaticoMensual");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.Anio).HasColumnName("anio");
            entity.Property(e => e.Estatus)
                .IsRequired()
                .HasMaxLength(2)
                .HasColumnName("estatus");
            entity.Property(e => e.FechaPeticion).HasColumnName("fechaPeticion");
            entity.Property(e => e.ImporteTotalRecep)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("importeTotalRecep");
            entity.Property(e => e.Mes).HasColumnName("mes");
            entity.Property(e => e.TotalEntrega)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("totalEntrega");
            entity.Property(e => e.VolExistenciaMes)
                .HasColumnType("decimal(18, 2)")
                .HasColumnName("volExistenciaMes");
        });

        modelBuilder.Entity<DocumentoBitacora>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento, e.NumeroRegistro });

            entity.ToTable("DocumentoBitacora");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.NumeroRegistro).HasColumnName("numeroRegistro");
            entity.Property(e => e.DescripcionEvento)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("descripcionEvento");
            entity.Property(e => e.FechaYhoraEvento)
                .HasColumnType("datetime")
                .HasColumnName("fechaYHoraEvento");
            entity.Property(e => e.IdentificacionEvento)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("identificacionEvento");
            entity.Property(e => e.TipoEvento)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("tipoEvento");
            entity.Property(e => e.UsuarioResponsable)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("usuarioResponsable");

            entity.HasOne(d => d.Empresa).WithMany(p => p.DocumentoBitacoras)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentoBitacora_Empresa");

            entity.HasOne(d => d.Planta).WithMany(p => p.DocumentoBitacoras)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentoBitacora_Planta");

            entity.HasOne(d => d.TipoEventoNavigation).WithMany(p => p.DocumentoBitacoras)
                .HasForeignKey(d => d.TipoEvento)
                .HasConstraintName("FK_DocumentoBitacora_c_TipoEvento");
        });

        modelBuilder.Entity<DocumentoDiarioDispenEntrega>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento, e.ClaveIdentificacionTanque, e.ClaveIdentificadorDispensario, e.IdentificadorManguera, e.Consecutivo });

            entity.ToTable("DocumentoDiarioDispenEntrega");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.ClaveIdentificacionTanque)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("claveIdentificacionTanque");
            entity.Property(e => e.ClaveIdentificadorDispensario)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("claveIdentificadorDispensario");
            entity.Property(e => e.IdentificadorManguera)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("identificadorManguera");
            entity.Property(e => e.Consecutivo)
                .ValueGeneratedOnAdd()
                .HasColumnName("consecutivo");
            entity.Property(e => e.FechaYhoraEntrega)
                .HasColumnType("datetime")
                .HasColumnName("fechaYHoraEntrega");
            entity.Property(e => e.PrecioVentaTotalizadorInsta)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("precioVentaTotalizadorInsta");
            entity.Property(e => e.TipoDeRegistro)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("tipoDeRegistro");
            entity.Property(e => e.VolEntregadoTotalAcumValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("volEntregadoTotalAcumValorNumerico");
            entity.Property(e => e.VolEntregadoTotalInstaValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("volEntregadoTotalInstaValorNumerico");

            entity.HasOne(d => d.Empresa).WithMany(p => p.DocumentoDiarioDispenEntregas)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentoDiarioDispenEntrega_Empresa");

            entity.HasOne(d => d.Planta).WithMany(p => p.DocumentoDiarioDispenEntregas)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentoDiarioDispenEntrega_Planta");
        });

        modelBuilder.Entity<DocumentoDiarioDispenEntrega1>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento, e.Periodo, e.Consecutivo, e.IdentificadorManguera })
                .HasName("PK__Document__5AFA8D184D3E1AB1")
                .HasAnnotation("SqlServer:FillFactor", 100);

            entity.ToTable("DocumentoDiarioDispenEntregas");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.Periodo).HasColumnName("periodo");
            entity.Property(e => e.Consecutivo).HasColumnName("consecutivo");
            entity.Property(e => e.IdentificadorManguera)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("identificadorManguera");
            entity.Property(e => e.SumaVentas)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("sumaVentas");
            entity.Property(e => e.SumaVolEntregadoUm)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("sumaVolEntregadoUM");
            entity.Property(e => e.SumaVolEntregadoValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("sumaVolEntregadoValorNumerico");
            entity.Property(e => e.TotalDocumentos).HasColumnName("totalDocumentos");
            entity.Property(e => e.TotalEntregas).HasColumnName("totalEntregas");
        });

        modelBuilder.Entity<DocumentoDiarioManguera>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento, e.ClaveDispensario, e.IdentificadorManguera });

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.ClaveDispensario)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("claveDispensario");
            entity.Property(e => e.IdentificadorManguera)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("identificadorManguera");

            entity.HasOne(d => d.Empresa).WithMany(p => p.DocumentoDiarioMangueras)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentoDiarioMangueras_Empresa");

            entity.HasOne(d => d.Planta).WithMany(p => p.DocumentoDiarioMangueras)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentoDiarioMangueras_Planta");
        });

        modelBuilder.Entity<DocumentoDiarioMedicionDispensario>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento, e.Consecutivo, e.ClaveDispensario });

            entity.ToTable("DocumentoDiarioMedicionDispensario");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.Consecutivo).HasColumnName("consecutivo");
            entity.Property(e => e.ClaveDispensario)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("claveDispensario");
            entity.Property(e => e.IncertidumbreMedicionSistMedicionDispensario)
                .HasColumnType("numeric(4, 3)")
                .HasColumnName("incertidumbreMedicionSistMedicionDispensario");
            entity.Property(e => e.LocalizOdescripSistMedicionDispensario)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("localizODescripSistMedicionDispensario");
            entity.Property(e => e.SistemaMedicionDispensario)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("sistemaMedicionDispensario");
            entity.Property(e => e.VigenciaCalibracionSistMedicionDispensario).HasColumnName("vigenciaCalibracionSistMedicionDispensario");

            entity.HasOne(d => d.Empresa).WithMany(p => p.DocumentoDiarioMedicionDispensarios)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentoDiarioMedicionDispensario_Empresa");

            entity.HasOne(d => d.Planta).WithMany(p => p.DocumentoDiarioMedicionDispensarios)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentoDiarioMedicionDispensario_Planta");
        });

        modelBuilder.Entity<DocumentoDiarioMedicionDucto>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento, e.Consecutivo, e.ClaveDucto });

            entity.ToTable("DocumentoDiarioMedicionDucto");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.Consecutivo).HasColumnName("consecutivo");
            entity.Property(e => e.ClaveDucto)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("claveDucto");
            entity.Property(e => e.IncertidumbreMedicionSistMedicionDispensario)
                .HasColumnType("numeric(4, 3)")
                .HasColumnName("incertidumbreMedicionSistMedicionDispensario");
            entity.Property(e => e.LocalizOdescripSistMedicionDispensario)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("localizODescripSistMedicionDispensario");
            entity.Property(e => e.SistemaMedicionDispensario)
                .HasMaxLength(25)
                .IsUnicode(false)
                .HasColumnName("sistemaMedicionDispensario");
            entity.Property(e => e.VigenciaCalibracionSistMedicionDispensario).HasColumnName("vigenciaCalibracionSistMedicionDispensario");
        });

        modelBuilder.Entity<DocumentoDiesel>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento });

            entity.ToTable("DocumentoDiesel");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.ComposDeCombustibleNoFosilEnDiesel)
                .HasColumnType("numeric(4, 2)")
                .HasColumnName("composDeCombustibleNoFosilEnDiesel");
            entity.Property(e => e.DieselConCombustibleNoFosil)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("dieselConCombustibleNoFosil");
        });

        modelBuilder.Entity<DocumentoDispensario>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento, e.ClaveDispensario });

            entity.ToTable("DocumentoDispensario");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.ClaveDispensario)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("claveDispensario");

            entity.HasOne(d => d.Empresa).WithMany(p => p.DocumentoDispensarios)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentoDispensario_Empresa");

            entity.HasOne(d => d.Planta).WithMany(p => p.DocumentoDispensarios)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentoDispensario_Planta");
        });

        modelBuilder.Entity<DocumentoDucto>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento, e.ClaveDucto });

            entity.ToTable("DocumentoDucto");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.ClaveDucto)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("claveDucto");
        });

        modelBuilder.Entity<DocumentoEstatus>(entity =>
        {
            entity.HasKey(e => e.Estatus);

            entity.ToTable("DocumentoEstatus");

            entity.Property(e => e.Estatus)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("estatus");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<DocumentoExistencium>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento });

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.FechaActual)
                .HasColumnType("datetime")
                .HasColumnName("fechaActual");
            entity.Property(e => e.FechaYhoraEstaMedicionMes)
                .HasColumnType("datetime")
                .HasColumnName("FechaYHoraEstaMedicionMes");
            entity.Property(e => e.ValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("valorNumerico");

            entity.HasOne(d => d.Empresa).WithMany(p => p.DocumentoExistencia)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentoExistencia_Empresa");

            entity.HasOne(d => d.Planta).WithMany(p => p.DocumentoExistencia)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentoExistencia_Planta");
        });

        modelBuilder.Entity<DocumentoGasLp>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento });

            entity.ToTable("DocumentoGasLP");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.ComposDeButanoEnGasLp)
                .HasColumnType("numeric(4, 2)")
                .HasColumnName("composDeButanoEnGasLP");
            entity.Property(e => e.ComposDePropanoEnGasLp)
                .HasColumnType("numeric(4, 2)")
                .HasColumnName("composDePropanoEnGasLP");

            entity.HasOne(d => d.Empresa).WithMany(p => p.DocumentoGasLps)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentoGasLP_Empresa");

            entity.HasOne(d => d.Planta).WithMany(p => p.DocumentoGasLps)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentoGasLP_Planta");
        });

        modelBuilder.Entity<DocumentoGasNatural>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento });

            entity.ToTable("DocumentoGasNatural");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.ComplementoGnc)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("complementoGNC");
            entity.Property(e => e.FraccionMolar)
                .HasColumnType("numeric(4, 2)")
                .HasColumnName("fraccionMolar");
            entity.Property(e => e.PoderCalorifico)
                .HasColumnType("numeric(8, 3)")
                .HasColumnName("poderCalorifico");
        });

        modelBuilder.Entity<DocumentoGasolina>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento });

            entity.ToTable("DocumentoGasolina");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.ComposDeCombustibleNoFosilEnGasolina)
                .HasColumnType("numeric(4, 2)")
                .HasColumnName("composDeCombustibleNoFosilEnGasolina");
            entity.Property(e => e.ComposOctanajeGasolina)
                .HasColumnType("numeric(4, 2)")
                .HasColumnName("composOctanajeGasolina");
            entity.Property(e => e.GasolinaConCombustibleNoFosil)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("gasolinaConCombustibleNoFosil");
        });

        modelBuilder.Entity<DocumentoGenerado>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento, e.Consecutivo });

            entity.ToTable("DocumentoGenerado");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.Consecutivo).HasColumnName("consecutivo");
            entity.Property(e => e.Descripcion)
                .IsRequired()
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.FechaGeneracion)
                .HasColumnType("datetime")
                .HasColumnName("fechaGeneracion");
            entity.Property(e => e.Guid)
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("guid");
            entity.Property(e => e.Nombre)
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.Xml).HasColumnName("xml");

            entity.HasOne(d => d.Empresa).WithMany(p => p.DocumentoGenerados)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentoGenerado_Empresa");

            entity.HasOne(d => d.Planta).WithMany(p => p.DocumentoGenerados)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentoGenerado_Planta");
        });

        modelBuilder.Entity<DocumentoGeolocalizacion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("DocumentoGeolocalizacion");

            entity.Property(e => e.Consecutivo).HasColumnName("consecutivo");
            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.GeolocalizacionLatitud)
                .HasColumnType("numeric(19, 7)")
                .HasColumnName("geolocalizacionLatitud");
            entity.Property(e => e.GeolocalizacionLongitud)
                .HasColumnType("numeric(19, 7)")
                .HasColumnName("geolocalizacionLongitud");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.Periodo).HasColumnName("periodo");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
        });

        modelBuilder.Entity<DocumentoMedicionTanque>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento, e.ClaveIdentificacionTanque, e.Consecutivo });

            entity.ToTable("DocumentoMedicionTanque");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.ClaveIdentificacionTanque)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("claveIdentificacionTanque");
            entity.Property(e => e.Consecutivo).HasColumnName("consecutivo");
            entity.Property(e => e.IncertidumbreMedicionSistMedicionTanque)
                .HasColumnType("numeric(4, 3)")
                .HasColumnName("incertidumbreMedicionSistMedicionTanque");
            entity.Property(e => e.LocalizOdescripSistMedicionTanque)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("localizODescripSistMedicionTanque");
            entity.Property(e => e.SistemaMedicionTanque)
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("sistemaMedicionTanque");
            entity.Property(e => e.VigenciaCalibracionSistMedicionTanque).HasColumnName("vigenciaCalibracionSistMedicionTanque");

            entity.HasOne(d => d.Empresa).WithMany(p => p.DocumentoMedicionTanques)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentoMedicionTanque_Empresa");

            entity.HasOne(d => d.Planta).WithMany(p => p.DocumentoMedicionTanques)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentoMedicionTanque_Planta");
        });

        modelBuilder.Entity<DocumentoProducto>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento });

            entity.ToTable("DocumentoProducto");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.ClaveProducto).HasColumnName("claveProducto");
            entity.Property(e => e.ClaveSubProducto).HasColumnName("claveSubProducto");
            entity.Property(e => e.ConcentracionSustanciaMarcaje)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("concentracionSustanciaMarcaje");
            entity.Property(e => e.MarcaComercial)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("marcaComercial");
            entity.Property(e => e.Marcaje)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("marcaje");
            entity.Property(e => e.ProductoId)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("productoId");
            entity.Property(e => e.Um).HasColumnName("UM");

            entity.HasOne(d => d.ClaveProductoNavigation).WithMany(p => p.DocumentoProductos)
                .HasForeignKey(d => d.ClaveProducto)
                .HasConstraintName("FK_DocumentoProducto_c_ClaveProductos");

            entity.HasOne(d => d.ClaveSubProductoNavigation).WithMany(p => p.DocumentoProductos)
                .HasForeignKey(d => d.ClaveSubProducto)
                .HasConstraintName("FK_DocumentoProducto_c_ClaveSubproductos");

            entity.HasOne(d => d.Empresa).WithMany(p => p.DocumentoProductos)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentoProducto_Empresa");

            entity.HasOne(d => d.Planta).WithMany(p => p.DocumentoProductos)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentoProducto_Planta");

            entity.HasOne(d => d.Producto).WithMany(p => p.DocumentoProductos)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentoProducto_Productos");

            entity.HasOne(d => d.UmNavigation).WithMany(p => p.DocumentoProductos)
                .HasForeignKey(d => d.Um)
                .HasConstraintName("FK_DocumentoProducto_t_claveUnidadMedida");
        });

        modelBuilder.Entity<DocumentoProveedore>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.CodigoP)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("codigoP");
            entity.Property(e => e.Consecutivo).HasColumnName("consecutivo");
            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.Periodo).HasColumnName("periodo");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.RfcProveedor)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("rfcProveedor");
        });

        modelBuilder.Entity<DocumentoTanque>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento, e.ClaveIdentificacionTanque });

            entity.ToTable("DocumentoTanque");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.ClaveIdentificacionTanque)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("claveIdentificacionTanque");
            entity.Property(e => e.CapFondajeValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("capFondajeValorNumerico");
            entity.Property(e => e.CapGasTalonValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("capGasTalonValorNumerico");
            entity.Property(e => e.CapOperativaValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("capOperativaValorNumerico");
            entity.Property(e => e.CapTotalValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("capTotalValorNumerico");
            entity.Property(e => e.CapUtilValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("capUtilValorNumerico");
            entity.Property(e => e.EstadoTanque)
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("estadoTanque");
            entity.Property(e => e.LocalizacionYodescripcionTanque)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("localizacionYODescripcionTanque");
            entity.Property(e => e.Um).HasColumnName("UM");
            entity.Property(e => e.VigenciaCalibracionTanque)
                .HasColumnType("datetime")
                .HasColumnName("vigenciaCalibracionTanque");
            entity.Property(e => e.VolMinOperaValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("volMinOperaValorNumerico");

            entity.HasOne(d => d.Empresa).WithMany(p => p.DocumentoTanques)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentoTanque_Empresa");

            entity.HasOne(d => d.Planta).WithMany(p => p.DocumentoTanques)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentoTanque_Planta");

            entity.HasOne(d => d.UmNavigation).WithMany(p => p.DocumentoTanques)
                .HasForeignKey(d => d.Um)
                .HasConstraintName("FK_DocumentoTanque_t_claveUnidadMedida");
        });

        modelBuilder.Entity<DocumentoTanqueExistencium>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento, e.ClaveIdentificacionTanque });

            entity.HasIndex(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento, e.ClaveIdentificacionTanque }, "IX_DocumentoTanqueExistencia").IsUnique();

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.ClaveIdentificacionTanque)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("claveIdentificacionTanque");
            entity.Property(e => e.FechayHoraEstaMedicion)
                .HasColumnType("datetime")
                .HasColumnName("fechayHoraEstaMedicion");
            entity.Property(e => e.FechayHoraMedicionAnterior)
                .HasColumnType("datetime")
                .HasColumnName("fechayHoraMedicionAnterior");
            entity.Property(e => e.HoraEntregaAcumulado).HasColumnName("horaEntregaAcumulado");
            entity.Property(e => e.HoraRecepcionAcumulado).HasColumnName("horaRecepcionAcumulado");
            entity.Property(e => e.Um)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("UM");
            entity.Property(e => e.VolumenAcumOpsRecepcion)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("volumenAcumOpsRecepcion");
            entity.Property(e => e.VolumenExistencias)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("volumenExistencias");
            entity.Property(e => e.VolumenExistenciasAnterior)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("volumenExistenciasAnterior");
            entity.Property(e => e.VolumenvolumenAcumOpsEntrega)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("volumenvolumenAcumOpsEntrega");

            entity.HasOne(d => d.Empresa).WithMany(p => p.DocumentoTanqueExistencia)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentoTanqueExistencia_Empresa");

            entity.HasOne(d => d.Planta).WithMany(p => p.DocumentoTanqueExistencia)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_DocumentoTanqueExistencia_Planta");
        });

        modelBuilder.Entity<Ducto>(entity =>
        {
            entity.HasKey(e => new { e.PlantaId, e.ClaveIdentificacionDucto });

            entity.ToTable("Ducto");

            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.ClaveIdentificacionDucto)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("claveIdentificacionDucto");
            entity.Property(e => e.CapacidadGasTalon)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("capacidadGasTalon");
            entity.Property(e => e.DiametroDucto)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("diametroDucto");
            entity.Property(e => e.LocalizacionYodescripcionDucto)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("localizacionYODescripcionDucto");
            entity.Property(e => e.Um).HasColumnName("UM");
        });

        modelBuilder.Entity<Empresa>(entity =>
        {
            entity.HasKey(e => e.EmpresaId)
                .HasName("PK__Empresa__C0E67079BEEB2621")
                .HasAnnotation("SqlServer:FillFactor", 100);

            entity.ToTable("Empresa");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.Activa).HasColumnName("activa");
            entity.Property(e => e.FechaCreacion)
                .HasColumnType("datetime")
                .HasColumnName("fechaCreacion");
            entity.Property(e => e.RazonSocial)
                .IsRequired()
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("razonSocial");
            entity.Property(e => e.Rfc)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("rfc");
            entity.Property(e => e.RfcRepresentanteLegal)
                .IsRequired()
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("rfcRepresentanteLegal");
            entity.Property(e => e.VersionCtrVol)
                .IsRequired()
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("versionCtrVol");

            entity.HasOne(d => d.VersionCtrVolNavigation).WithMany(p => p.Empresas)
                .HasForeignKey(d => d.VersionCtrVol)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Empresa_VersionControlVolumetrico");
        });

        modelBuilder.Entity<EmpresaCfgNotificacione>(entity =>
        {
            entity.HasNoKey();

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.TipoNotificacion)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("tipoNotificacion");
        });

        modelBuilder.Entity<EmpresaImpExp>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.Tipo, e.TipoDocumento, e.TipoLayout });

            entity.ToTable("EmpresaImpExp");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.Tipo)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("tipo");
            entity.Property(e => e.TipoDocumento)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("tipoDocumento");
            entity.Property(e => e.TipoLayout)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("tipoLayout");
            entity.Property(e => e.Activo).HasColumnName("activo");
            entity.Property(e => e.Ruta)
                .IsRequired()
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("ruta");

            entity.HasOne(d => d.Empresa).WithMany(p => p.EmpresaImpExps)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmpresaImpExp_Empresa");

            entity.HasOne(d => d.TipoNavigation).WithMany(p => p.EmpresaImpExps)
                .HasForeignKey(d => d.Tipo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmpresaImpExp_c_Tipo");

            entity.HasOne(d => d.TipoDocumentoNavigation).WithMany(p => p.EmpresaImpExps)
                .HasForeignKey(d => d.TipoDocumento)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmpresaImpExp_c_TipoImpExp");
        });

        modelBuilder.Entity<EmpresaPlantum>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId })
                .HasName("PK__EmpresaP__C0E670791E0D6561")
                .HasAnnotation("SqlServer:FillFactor", 100);

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.Id)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("id");

            entity.HasOne(d => d.Empresa).WithMany(p => p.EmpresaPlanta)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmpresaPlanta_Empresa");

            entity.HasOne(d => d.Planta).WithMany(p => p.EmpresaPlanta)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmpresaPlanta_Planta");
        });

        modelBuilder.Entity<EmpresaProducto>(entity =>
        {
            entity.HasKey(e => new { e.PlantaId, e.ProductoId });

            entity.ToTable("EmpresaProducto");

            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.ProductoId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("productoId");
            entity.Property(e => e.Disponibilidad).HasColumnName("disponibilidad");

            entity.HasOne(d => d.Planta).WithMany(p => p.EmpresaProductos)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmpresaProducto_Planta");

            entity.HasOne(d => d.Producto).WithMany(p => p.EmpresaProductos)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmpresaProducto_Productos");
        });

        modelBuilder.Entity<EmpresaProveedor>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.ProveedorId });

            entity.ToTable("EmpresaProveedor");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.ProveedorId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("proveedorId");
            entity.Property(e => e.Disponibilidad).HasColumnName("disponibilidad");

            entity.HasOne(d => d.Empresa).WithMany(p => p.EmpresaProveedors)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmpresaProveedor_Empresa");

            entity.HasOne(d => d.Proveedor).WithMany(p => p.EmpresaProveedors)
                .HasForeignKey(d => d.ProveedorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EmpresaProveedor_Proveedores");
        });

        modelBuilder.Entity<EntregaDiario>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento, e.ClaveIdentificacionTanque, e.NumerDeRegistro });

            entity.ToTable("EntregaDiario");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.ClaveIdentificacionTanque)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("claveIdentificacionTanque");
            entity.Property(e => e.NumerDeRegistro)
                .ValueGeneratedOnAdd()
                .HasColumnName("numerDeRegistro");
            entity.Property(e => e.FechaYhoraFinalEntrega)
                .HasColumnType("datetime")
                .HasColumnName("fechaYHoraFinalEntrega");
            entity.Property(e => e.FechaYhoraInicioEntrega)
                .HasColumnType("datetime")
                .HasColumnName("fechaYHoraInicioEntrega");
            entity.Property(e => e.IsDucto).HasColumnName("isDucto");
            entity.Property(e => e.PresionAbsoluta)
                .HasColumnType("numeric(6, 3)")
                .HasColumnName("presionAbsoluta");
            entity.Property(e => e.Temperatura)
                .HasColumnType("numeric(6, 3)")
                .HasColumnName("temperatura");
            entity.Property(e => e.VolEntregaValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("volEntregaValorNumerico");
            entity.Property(e => e.VolFinalTanqueValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("volFinalTanqueValorNumerico");
            entity.Property(e => e.VolInicialTanqueValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("volInicialTanqueValorNumerico");

            entity.HasOne(d => d.Empresa).WithMany(p => p.EntregaDiarios)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EntregaDiario_Empresa");

            entity.HasOne(d => d.Planta).WithMany(p => p.EntregaDiarios)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EntregaDiario_Planta");
        });

        modelBuilder.Entity<EntregasDiario>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("EntregasDiario");

            entity.Property(e => e.ClaveIdentificacionTanque)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("claveIdentificacionTanque");
            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.Producto)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("producto");
            entity.Property(e => e.SumaVentas)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("sumaVentas");
            entity.Property(e => e.SumaVolEntregadoUm)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("sumaVolEntregadoUM");
            entity.Property(e => e.SumaVolEntregadoValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("sumaVolEntregadoValorNumerico");
            entity.Property(e => e.TotalDocumentos).HasColumnName("totalDocumentos");
            entity.Property(e => e.TotalEntregas).HasColumnName("totalEntregas");
        });

        modelBuilder.Entity<EntregasMensuale>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento });

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.ImporteTotalEntregasMensual)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("importeTotalEntregasMensual");
            entity.Property(e => e.PoderCalorifico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("poderCalorifico");
            entity.Property(e => e.PoderCalorificoUm).HasColumnName("poderCalorificoUM");
            entity.Property(e => e.SumaVolEntregadoMesUm).HasColumnName("sumaVolEntregadoMesUM");
            entity.Property(e => e.SumaVolEntregadoMesValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("sumaVolEntregadoMesValorNumerico");
            entity.Property(e => e.TotalDocumentosMes).HasColumnName("totalDocumentosMes");
            entity.Property(e => e.TotalEntregasMes).HasColumnName("totalEntregasMes");

            entity.HasOne(d => d.Empresa).WithMany(p => p.EntregasMensuales)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EntregasMensuales_Empresa");

            entity.HasOne(d => d.Planta).WithMany(p => p.EntregasMensuales)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EntregasMensuales_Planta");

            entity.HasOne(d => d.SumaVolEntregadoMesUmNavigation).WithMany(p => p.EntregasMensuales)
                .HasForeignKey(d => d.SumaVolEntregadoMesUm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_EntregasMensuales_t_claveUnidadMedida");
        });

        modelBuilder.Entity<GasLp>(entity =>
        {
            entity.HasKey(e => e.ProductoId);

            entity.ToTable("GasLP");

            entity.Property(e => e.ProductoId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("productoId");
            entity.Property(e => e.ComposDeButanoEnGasLp)
                .HasColumnType("numeric(4, 2)")
                .HasColumnName("composDeButanoEnGasLP");
            entity.Property(e => e.ComposDePropanoEnGasLp)
                .HasColumnType("numeric(4, 2)")
                .HasColumnName("composDePropanoEnGasLP");

            entity.HasOne(d => d.Producto).WithOne(p => p.GasLp)
                .HasForeignKey<GasLp>(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_GasLP_Productos");
        });

        modelBuilder.Entity<GasNatural>(entity =>
        {
            entity.HasKey(e => e.ProductoId);

            entity.ToTable("GasNatural");

            entity.Property(e => e.ProductoId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("productoId");
            entity.Property(e => e.ComplementoGnc)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("complementoGNC");
            entity.Property(e => e.FraccionMolar)
                .HasColumnType("numeric(4, 2)")
                .HasColumnName("fraccionMolar");
            entity.Property(e => e.PoderCalorifico)
                .HasColumnType("numeric(8, 3)")
                .HasColumnName("poderCalorifico");
        });

        modelBuilder.Entity<Gasolina>(entity =>
        {
            entity.HasKey(e => e.ProductoId);

            entity.ToTable("Gasolina");

            entity.Property(e => e.ProductoId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("productoId");
            entity.Property(e => e.ComposDeCombustibleNoFosilEnGasolina)
                .HasColumnType("numeric(4, 2)")
                .HasColumnName("composDeCombustibleNoFosilEnGasolina");
            entity.Property(e => e.ComposOctanajeGasolina)
                .HasColumnType("numeric(4, 2)")
                .HasColumnName("composOctanajeGasolina");
            entity.Property(e => e.GasolinaConCombustibleNoFosil)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("gasolinaConCombustibleNoFosil");
        });

        modelBuilder.Entity<HistoryPass>(entity =>
        {
            entity.HasKey(e => new { e.UsuarioId, e.Consecutivo }).HasName("PK_HistoryPass_1");

            entity.ToTable("HistoryPass");

            entity.Property(e => e.UsuarioId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("usuarioID");
            entity.Property(e => e.Consecutivo)
                .ValueGeneratedOnAdd()
                .HasColumnName("consecutivo");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("fecha");
            entity.Property(e => e.HashPassword)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("hashPassword");

            entity.HasOne(d => d.Usuario).WithMany(p => p.HistoryPasses)
                .HasForeignKey(d => d.UsuarioId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_HistoryPass_Usuario");
        });

        modelBuilder.Entity<LogMovimiento>(entity =>
        {
            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Descripcion)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("fecha");
            entity.Property(e => e.Ip)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("ip");
            entity.Property(e => e.Mac)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("mac");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.Tipo)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo");
            entity.Property(e => e.Usuario)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("usuario");
        });

        modelBuilder.Entity<Manuale>(entity =>
        {
            entity.HasKey(e => e.Consecutivo);

            entity.Property(e => e.Consecutivo).HasColumnName("consecutivo");
            entity.Property(e => e.AdjuntoPdf).HasColumnName("adjuntoPDF");
            entity.Property(e => e.NombreManual)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("nombreManual");
        });

        modelBuilder.Entity<MedicionDispensario>(entity =>
        {
            entity.HasKey(e => new { e.PlantaId, e.ClaveDispensario, e.Consecutivo });

            entity.ToTable("MedicionDispensario");

            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.ClaveDispensario)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("claveDispensario");
            entity.Property(e => e.Consecutivo).HasColumnName("consecutivo");
            entity.Property(e => e.IncertidumbreMedicionSistMedicionDispensario)
                .HasColumnType("numeric(4, 3)")
                .HasColumnName("incertidumbreMedicionSistMedicionDispensario");
            entity.Property(e => e.LocalizOdescripSistMedicionDispensario)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("localizODescripSistMedicionDispensario");
            entity.Property(e => e.SistemaMedicionDispensario)
                .IsRequired()
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("sistemaMedicionDispensario");
            entity.Property(e => e.VigenciaCalibracionSistMedicionDispensario).HasColumnName("vigenciaCalibracionSistMedicionDispensario");

            entity.HasOne(d => d.Planta).WithMany(p => p.MedicionDispensarios)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MedicionDispensario_Planta");
        });

        modelBuilder.Entity<MedicionDucto>(entity =>
        {
            entity.HasKey(e => new { e.PlantaId, e.ClaveIdentificacionDucto, e.Consecutivo });

            entity.ToTable("MedicionDucto");

            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.ClaveIdentificacionDucto)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("claveIdentificacionDucto");
            entity.Property(e => e.Consecutivo).HasColumnName("consecutivo");
            entity.Property(e => e.IncertidumbreMedicionSistMedicionDucto)
                .HasColumnType("numeric(4, 3)")
                .HasColumnName("incertidumbreMedicionSistMedicionDucto");
            entity.Property(e => e.LocalizOdescripSistMedicionDucto)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("localizODescripSistMedicionDucto");
            entity.Property(e => e.SistemaMedicionDucto)
                .IsRequired()
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("sistemaMedicionDucto");
            entity.Property(e => e.VigenciaCalibracionSistMedicionDucto).HasColumnName("vigenciaCalibracionSistMedicionDucto");
        });

        modelBuilder.Entity<MedicionTanque>(entity =>
        {
            entity.HasKey(e => new { e.PlantaId, e.ClaveIdentificacionTanque, e.Consecutivo });

            entity.ToTable("MedicionTanque");

            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.ClaveIdentificacionTanque)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("claveIdentificacionTanque");
            entity.Property(e => e.Consecutivo).HasColumnName("consecutivo");
            entity.Property(e => e.IncertidumbreMedicionSistMedicionTanque)
                .HasColumnType("numeric(4, 3)")
                .HasColumnName("incertidumbreMedicionSistMedicionTanque");
            entity.Property(e => e.LocalizOdescripSistMedicionTanque)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("localizODescripSistMedicionTanque");
            entity.Property(e => e.SistemaMedicionTanque)
                .IsRequired()
                .HasMaxLength(16)
                .IsUnicode(false)
                .HasColumnName("sistemaMedicionTanque");
            entity.Property(e => e.VigenciaCalibracionSistMedicionTanque).HasColumnName("vigenciaCalibracionSistMedicionTanque");

            entity.HasOne(d => d.Planta).WithMany(p => p.MedicionTanques)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MedicionTanque_Planta");

            entity.HasOne(d => d.Tanque).WithMany(p => p.MedicionTanques)
                .HasForeignKey(d => new { d.PlantaId, d.ClaveIdentificacionTanque })
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_MedicionTanque_Tanques");
        });

        modelBuilder.Entity<Mitablanueva>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("mitablanueva");

            entity.Property(e => e.Id).HasColumnName("id");
        });

        modelBuilder.Entity<PerfilAccion>(entity =>
        {
            entity.HasKey(e => new { e.PerfilId, e.CodAccion });

            entity.ToTable("PerfilAccion");

            entity.Property(e => e.CodAccion)
                .HasMaxLength(5)
                .IsUnicode(false);
            entity.Property(e => e.Id)
                .HasMaxLength(10)
                .IsFixedLength()
                .HasColumnName("id");

            entity.HasOne(d => d.CodAccionNavigation).WithMany(p => p.PerfilAccions)
                .HasForeignKey(d => d.CodAccion)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PerfilAccion_Acciones");

            entity.HasOne(d => d.Perfil).WithMany(p => p.PerfilAccions)
                .HasForeignKey(d => d.PerfilId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PerfilAccion_PerfilAccion");
        });

        modelBuilder.Entity<PerfilEmpresa>(entity =>
        {
            entity.HasKey(e => new { e.PerfilId, e.EmpresaId }).HasName("PK_PerfilEmpresa_1");

            entity.ToTable("PerfilEmpresa");

            entity.Property(e => e.PerfilId).HasColumnName("perfilId");
            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");

            entity.HasOne(d => d.Empresa).WithMany(p => p.PerfilEmpresas)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PerfilEmpresa_Empresa");

            entity.HasOne(d => d.Perfil).WithMany(p => p.PerfilEmpresas)
                .HasForeignKey(d => d.PerfilId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PerfilEmpresa_Perfiles");

            entity.HasOne(d => d.Planta).WithMany(p => p.PerfilEmpresas)
                .HasForeignKey(d => d.PlantaId)
                .HasConstraintName("FK_PerfilEmpresa_Planta");
        });

        modelBuilder.Entity<Perfile>(entity =>
        {
            entity.HasKey(e => e.PerfilId).HasName("PK_Perfiles_1");

            entity.Property(e => e.PerfilId).HasColumnName("perfilID");
            entity.Property(e => e.Acciones)
                .HasColumnType("text")
                .HasColumnName("acciones");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.Perfil)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("perfil");
        });

        modelBuilder.Entity<PeticionPassword>(entity =>
        {
            entity.ToTable("PeticionPassword");

            entity.Property(e => e.Id).HasColumnName("id");
            entity.Property(e => e.Correo)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("correo");
            entity.Property(e => e.FechaPeticion)
                .HasColumnType("datetime")
                .HasColumnName("fechaPeticion");
            entity.Property(e => e.Guid)
                .IsRequired()
                .HasMaxLength(36)
                .IsUnicode(false)
                .HasColumnName("guid");
            entity.Property(e => e.Usado).HasColumnName("usado");
        });

        modelBuilder.Entity<PlantaGeolocalizacion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("PlantaGeolocalizacion");

            entity.Property(e => e.Consecutivo).HasColumnName("consecutivo");
            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.GeolocalizacionLatitud)
                .HasColumnType("numeric(19, 7)")
                .HasColumnName("geolocalizacionLatitud");
            entity.Property(e => e.GeolocalizacionLongitud)
                .HasColumnType("numeric(19, 7)")
                .HasColumnName("geolocalizacionLongitud");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
        });

        modelBuilder.Entity<PlantaProducto>(entity =>
        {
            entity.HasKey(e => new { e.PlantaId, e.ProductoId });

            entity.ToTable("PlantaProducto");

            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.ProductoId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("productoId");
            entity.Property(e => e.Disponibilidad).HasColumnName("disponibilidad");

            entity.HasOne(d => d.Planta).WithMany(p => p.PlantaProductos)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PlantaProducto_Planta");

            entity.HasOne(d => d.Producto).WithMany(p => p.PlantaProductos)
                .HasForeignKey(d => d.ProductoId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_PlantaProducto_Productos");
        });

        modelBuilder.Entity<Plantum>(entity =>
        {
            entity.HasKey(e => e.PlantaId)
                .HasName("PK__Planta__A2F9C0EECBEA7A34")
                .HasAnnotation("SqlServer:FillFactor", 100);

            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.Activa).HasColumnName("activa");
            entity.Property(e => e.ClaveInstalacion)
                .HasMaxLength(30)
                .IsUnicode(false)
                .HasColumnName("claveInstalacion");
            entity.Property(e => e.DescripcionInstalacion)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("descripcionInstalacion");
            entity.Property(e => e.DescripcionPlanta)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("descripcionPlanta");
            entity.Property(e => e.IdModalidadPermiso).HasColumnName("idModalidadPermiso");
            entity.Property(e => e.IdTipoCaracter).HasColumnName("idTipoCaracter");
            entity.Property(e => e.InstalacionAlmacenGasNatural)
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("instalacionAlmacenGasNatural");
            entity.Property(e => e.NumContratoOasignacion)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("numContratoOAsignacion");
            entity.Property(e => e.NumPermiso)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("numPermiso");
            entity.Property(e => e.NumeroDispensarios).HasColumnName("numeroDispensarios");
            entity.Property(e => e.NumeroDuctosEntradaSalida).HasColumnName("numeroDuctosEntradaSalida");
            entity.Property(e => e.NumeroDuctosTransporteDistribucion).HasColumnName("numeroDuctosTransporteDistribucion");
            entity.Property(e => e.NumeroPozos).HasColumnName("numeroPozos");
            entity.Property(e => e.NumeroTanques).HasColumnName("numeroTanques");

            entity.HasOne(d => d.IdModalidadPermisoNavigation).WithMany(p => p.Planta)
                .HasForeignKey(d => d.IdModalidadPermiso)
                .HasConstraintName("FK_Planta_t_clavePermisos");

            entity.HasOne(d => d.IdTipoCaracterNavigation).WithMany(p => p.Planta)
                .HasForeignKey(d => d.IdTipoCaracter)
                .HasConstraintName("FK_Planta_c_Caracter");
        });

        modelBuilder.Entity<Producto>(entity =>
        {
            entity.Property(e => e.ProductoId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("productoId");
            entity.Property(e => e.Activo).HasColumnName("activo");
            entity.Property(e => e.ConcentracionSustanciaMarcaje)
                .HasMaxLength(1000)
                .IsUnicode(false)
                .HasColumnName("concentracionSustanciaMarcaje");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.IdClaveProducto).HasColumnName("idClaveProducto");
            entity.Property(e => e.IdClaveSubProducto).HasColumnName("idClaveSubProducto");
            entity.Property(e => e.IdUm).HasColumnName("idUM");
            entity.Property(e => e.MarcaComercial)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("marcaComercial");
            entity.Property(e => e.Marcaje)
                .HasMaxLength(40)
                .IsUnicode(false)
                .HasColumnName("marcaje");
        });

        modelBuilder.Entity<Proveedore>(entity =>
        {
            entity.HasKey(e => e.NoProveedor);

            entity.Property(e => e.NoProveedor)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noProveedor");
            entity.Property(e => e.Activo).HasColumnName("activo");
            entity.Property(e => e.CodigoP)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("codigoP");
            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.NumPermiso)
                .HasMaxLength(24)
                .IsUnicode(false)
                .HasColumnName("numPermiso");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.RazonSocialP)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("razonSocialP");
            entity.Property(e => e.RfcP)
                .HasMaxLength(13)
                .IsUnicode(false)
                .HasColumnName("rfcP");
        });

        modelBuilder.Entity<RecepcionDiario>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento, e.ClaveIdentificacionTanque, e.NumerDeRegistro });

            entity.ToTable("RecepcionDiario");

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.ClaveIdentificacionTanque)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("claveIdentificacionTanque");
            entity.Property(e => e.NumerDeRegistro)
                .ValueGeneratedOnAdd()
                .HasColumnName("numerDeRegistro");
            entity.Property(e => e.FechaYhoraFinalRecepcion)
                .HasColumnType("datetime")
                .HasColumnName("fechaYHoraFinalRecepcion");
            entity.Property(e => e.FechaYhoraInicioRecepcion)
                .HasColumnType("datetime")
                .HasColumnName("fechaYHoraInicioRecepcion");
            entity.Property(e => e.IsDucto).HasColumnName("isDucto");
            entity.Property(e => e.PresionAbsoluta)
                .HasColumnType("numeric(6, 3)")
                .HasColumnName("presionAbsoluta");
            entity.Property(e => e.Temperatura)
                .HasColumnType("numeric(6, 3)")
                .HasColumnName("temperatura");
            entity.Property(e => e.VolFinalTanqueValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("volFinalTanqueValorNumerico");
            entity.Property(e => e.VolInicialTanqueValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("volInicialTanqueValorNumerico");
            entity.Property(e => e.VolRecepValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("volRecepValorNumerico");

            entity.HasOne(d => d.Empresa).WithMany(p => p.RecepcionDiarios)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RecepcionDiario_Empresa");

            entity.HasOne(d => d.Planta).WithMany(p => p.RecepcionDiarios)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RecepcionDiario_Planta");
        });

        modelBuilder.Entity<RecepcionesDiario>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("RecepcionesDiario");

            entity.Property(e => e.ClaveIdentificacionTanque)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("claveIdentificacionTanque");
            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.Producto)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("producto");
            entity.Property(e => e.SumaCompras)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("sumaCompras");
            entity.Property(e => e.SumaVolRecepUm)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("sumaVolRecepUM");
            entity.Property(e => e.SumaVolRecepValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("sumaVolRecepValorNumerico");
            entity.Property(e => e.TotalDocumentos).HasColumnName("totalDocumentos");
            entity.Property(e => e.TotalRecepciones).HasColumnName("totalRecepciones");
        });

        modelBuilder.Entity<RecepcionesMensuale>(entity =>
        {
            entity.HasKey(e => new { e.EmpresaId, e.PlantaId, e.NoDocumento });

            entity.Property(e => e.EmpresaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("empresaId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.NoDocumento)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("noDocumento");
            entity.Property(e => e.ImporteTotalRecepcionesMensual)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("importeTotalRecepcionesMensual");
            entity.Property(e => e.PoderCalorifico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("poderCalorifico");
            entity.Property(e => e.PoderCalorificoUm).HasColumnName("poderCalorificoUM");
            entity.Property(e => e.SumaVolRecepMesUm).HasColumnName("sumaVolRecepMesUM");
            entity.Property(e => e.SumaVolRecepMesValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("sumaVolRecepMesValorNumerico");
            entity.Property(e => e.TotalDocumentosMes).HasColumnName("totalDocumentosMes");
            entity.Property(e => e.TotalRecepcionesMes).HasColumnName("totalRecepcionesMes");

            entity.HasOne(d => d.Empresa).WithMany(p => p.RecepcionesMensuales)
                .HasForeignKey(d => d.EmpresaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RecepcionesMensuales_Empresa");

            entity.HasOne(d => d.Planta).WithMany(p => p.RecepcionesMensuales)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RecepcionesMensuales_Planta");

            entity.HasOne(d => d.SumaVolRecepMesUmNavigation).WithMany(p => p.RecepcionesMensuales)
                .HasForeignKey(d => d.SumaVolRecepMesUm)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_RecepcionesMensuales_RecepcionesMensuales");
        });

        modelBuilder.Entity<TClavePermiso>(entity =>
        {
            entity.ToTable("t_clavePermisos");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.ModalidadPermiso)
                .HasMaxLength(5)
                .IsUnicode(false)
                .HasColumnName("modalidadPermiso");
        });

        modelBuilder.Entity<TClaveUnidadMedidum>(entity =>
        {
            entity.ToTable("t_claveUnidadMedida");

            entity.Property(e => e.Id)
                .ValueGeneratedNever()
                .HasColumnName("id");
            entity.Property(e => e.ClaveUnidadMedida)
                .IsRequired()
                .HasMaxLength(4)
                .IsUnicode(false)
                .HasColumnName("claveUnidadMedida");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<Tanque>(entity =>
        {
            entity.HasKey(e => new { e.PlantaId, e.ClaveIdentificacionTanque });

            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");
            entity.Property(e => e.ClaveIdentificacionTanque)
                .HasMaxLength(12)
                .IsUnicode(false)
                .HasColumnName("claveIdentificacionTanque");
            entity.Property(e => e.CapFondajeValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("capFondajeValorNumerico");
            entity.Property(e => e.CapGasTalonValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("capGasTalonValorNumerico");
            entity.Property(e => e.CapOperativaValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("capOperativaValorNumerico");
            entity.Property(e => e.CapTotalValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("capTotalValorNumerico");
            entity.Property(e => e.CapUtilValorNumerico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("capUtilValorNumerico");
            entity.Property(e => e.EstadoTanque)
                .IsRequired()
                .HasMaxLength(1)
                .IsUnicode(false)
                .HasColumnName("estadoTanque");
            entity.Property(e => e.LocalizacionYodescripcionTanque)
                .IsRequired()
                .HasMaxLength(250)
                .IsUnicode(false)
                .HasColumnName("localizacionYODescripcionTanque");
            entity.Property(e => e.Um).HasColumnName("UM");
            entity.Property(e => e.VigenciaCalibracionTanque)
                .HasColumnType("datetime")
                .HasColumnName("vigenciaCalibracionTanque");
            entity.Property(e => e.VolMinOperaValorNumrico)
                .HasColumnType("numeric(18, 3)")
                .HasColumnName("volMinOperaValorNumrico");

            entity.HasOne(d => d.EstadoTanqueNavigation).WithMany(p => p.Tanques)
                .HasForeignKey(d => d.EstadoTanque)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Tanques_c_EstadoTanque");

            entity.HasOne(d => d.Planta).WithMany(p => p.Tanques)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Tanques_Planta");

            entity.HasOne(d => d.UmNavigation).WithMany(p => p.Tanques)
                .HasForeignKey(d => d.Um)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Tanques_t_claveUnidadMedida");
        });

        modelBuilder.Entity<TipoDocumento>(entity =>
        {
            entity.HasKey(e => e.TipoDocumento1)
                .HasName("PK__TipoDocu__8F9AD5174BDD5268")
                .HasAnnotation("SqlServer:FillFactor", 100);

            entity.ToTable("TipoDocumento");

            entity.Property(e => e.TipoDocumento1)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("tipoDocumento");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        modelBuilder.Entity<TipoImportacioDiario>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TipoImportacioDiario");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.TipoImportacion)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("tipoImportacion");
        });

        modelBuilder.Entity<TipoImportacionMensual>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TipoImportacionMensual");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.TipoImportacion)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("tipoImportacion");
        });

        modelBuilder.Entity<TipoNotificacion>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("tipoNotificacion");

            entity.Property(e => e.Descripcion)
                .HasMaxLength(150)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.TipoNotificacion1)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("tipoNotificacion");
        });

        modelBuilder.Entity<TipoProveedor>(entity =>
        {
            entity
                .HasNoKey()
                .ToTable("TipoProveedor");

            entity.Property(e => e.CodigoP)
                .HasMaxLength(2)
                .IsUnicode(false)
                .HasColumnName("codigoP");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.TipoProveedor1).HasColumnName("tipoProveedor");
        });

        modelBuilder.Entity<Usuario>(entity =>
        {
            entity.ToTable("Usuario");

            entity.Property(e => e.UsuarioId)
                .HasMaxLength(7)
                .IsUnicode(false)
                .HasColumnName("usuarioID");
            entity.Property(e => e.Activo).HasColumnName("activo");
            entity.Property(e => e.Correo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("correo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
            entity.Property(e => e.Password)
                .IsRequired()
                .HasMaxLength(500)
                .IsUnicode(false)
                .HasColumnName("password");
            entity.Property(e => e.PerfilId).HasColumnName("perfilID");
            entity.Property(e => e.PrimeraVez).HasColumnName("primeraVez");
            entity.Property(e => e.UpdatePassword).HasColumnName("updatePassword");

            entity.HasOne(d => d.Perfil).WithMany(p => p.Usuarios)
                .HasForeignKey(d => d.PerfilId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_Usuario_Perfiles");
        });

        modelBuilder.Entity<UsuarioPlantum>(entity =>
        {
            entity.HasKey(e => new { e.UsuarioId, e.PlantaId });

            entity.Property(e => e.UsuarioId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("usuarioId");
            entity.Property(e => e.PlantaId)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("plantaId");

            entity.HasOne(d => d.Planta).WithMany(p => p.UsuarioPlanta)
                .HasForeignKey(d => d.PlantaId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_UsuarioPlanta_Planta");
        });

        modelBuilder.Entity<VersionControlVolumetrico>(entity =>
        {
            entity.HasKey(e => e.VersionCtrVol);

            entity.ToTable("VersionControlVolumetrico");

            entity.Property(e => e.VersionCtrVol)
                .HasMaxLength(3)
                .IsUnicode(false)
                .HasColumnName("versionCtrVol");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("descripcion");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}